<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tifoss.log</title>
  <id>/atom.xml</id>
  <updated>2023-10-22T17:00:00Z</updated>
  <link href="https://tifoss.eu/" />
  <link href="https://tifoss.eu/atom.xml" rel="self" />
  <author>
    <name>Tifoss</name>
    <email>me@tifoss.eu</email>
  </author>
  <subtitle type="text">Open Source, Linux, Embedded Linux, Learning</subtitle>
  
  <entry>
    <title type="text">Man pages</title>
    <id>/post/man/</id>
    <updated>2023-10-22T17:00:00Z</updated>
    <published>2023-10-22T17:00:00Z</published>
    <link href="https://tifoss.eu/post/man/" />
    <author>
      <name>Tifoss</name>
      <email>me@tifoss.eu</email>
    </author>
    <content type="html"><![CDATA[<p>I started to read the &quot;Unix and Linux System Administration Handbook&quot;. Chapter 1 is named &quot;Where to Start&quot; and gives an overview of the remaining book and some references where to find help.</p>
<p>The book tries to cover the Debian based distributions, the Red Hat based distributions, including SUSE, and BSD using FreeBSD as an example.</p>
<p>The section about man pages was a nice reminder. Man pages are grouped into different sections. You can find the sections on the man page of man, by running <code>man man</code>.</p>
<p>The command <code>man -k &lt;word&gt;</code> searches for man pages with the given word in their synopses. An alias for this is apropos.</p>
<p>If you add new man pages, you can regenerate the index on Debian using <code>mandb</code>.</p>
<p>Most man pages are stored, gzip compressed, in <code>&#x2F;usr&#x2F;share&#x2F;man</code>. On Debian, the command <code>manpath</code> lists the search paths for man pages.</p>
<p>Man pages are opened with the command stored in the PAGER environment variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="text">Couch project: kilo</title>
    <id>/post/kilo/</id>
    <updated>2023-10-15T16:00:00Z</updated>
    <published>2023-10-15T16:00:00Z</published>
    <link href="https://tifoss.eu/post/kilo/" />
    <author>
      <name>Tifoss</name>
      <email>me@tifoss.eu</email>
    </author>
    <content type="html"><![CDATA[<p>I&#x27;m following a tutorial which describes how to re-build the kilo editor step by step, to polish my C skills.</p>
<h1 id="what-is-a-couch-project-">What is a couch project?</h1>
<p>I&#x27;m always trying to improve my skills, and in the evenings, when I&#x27;m sitting on my couch, I&#x27;m usually learning and&#x2F; or coding on my second screen, and next to my wine glass.</p>
<p>It&#x27;s not about producing high quality software, or doing intensive deep dives in new areas. It&#x27;s just about having fun, recap some old knowledge or skills and come down.</p>
<h1 id="kilo">Kilo</h1>
<p>Kilo is a small CLI editor, written in C using less than 1000 lines of code. For more details see <a href="https://github.com/antirez/kilo">https:&#x2F;&#x2F;github.com&#x2F;antirez&#x2F;kilo</a>.</p>
<p>The blog series <a href="https://viewsourcecode.org/snaptoken/kilo/">https:&#x2F;&#x2F;viewsourcecode.org&#x2F;snaptoken&#x2F;kilo&#x2F;</a> is explaining the kilo editor step by step, and explains the code in details.</p>
<p>I&#x27;m following these steps, to refresh my C skills and maybe learn some new CLI programming tricks. The result is published in my Github account:
<a href="https://github.com/tifoss/kilo">https:&#x2F;&#x2F;github.com&#x2F;tifoss&#x2F;kilo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="text">Static blog generation with blogc</title>
    <id>/post/blogc/</id>
    <updated>2023-10-15T17:00:00Z</updated>
    <published>2023-10-15T17:00:00Z</published>
    <link href="https://tifoss.eu/post/blogc/" />
    <author>
      <name>Tifoss</name>
      <email>me@tifoss.eu</email>
    </author>
    <content type="html"><![CDATA[<p>I&#x27;m using blogc as my static site generator for this blog.</p>
<h1 id="what-is-blogc-">What is blogc?</h1>
<p>Blogc is a static site generator. The official manpage states:</p>
<p>Blogc compiles source files and templates into blog&#x2F;website resources. It gets one (or more) source files and a template, and generates an output file, based on the template and the content read from the source file(s). It was designed to be used with make(1).</p>
<p>From my point of view, it&#x27;s quite similar to Hugo or Jekyll.</p>
<h1 id="why-blogc-">Why blogc?</h1>
<p>I was looking for a static site generator, to document this project. In the past, for other projects, I used Jekyll, Hugo or Pelican, but since this project is about Linux and embedded development, I wanted to use a static site generator written in C.</p>
<p>Blogc looked already on the fist glance very promising. It&#x27;s using make and autotools, the documentation is done as manpages, and the template syntax is Jinja2 like and was very familiar to me. Because of these reasons, I decided to go with it.</p>
<h1 id="my-template">My template</h1>
<p>My blog template is a fork of <a href="https://github.com/blogc/blogc-the-plain">https:&#x2F;&#x2F;github.com&#x2F;blogc&#x2F;blogc-the-plain</a>, which is a rebuild of &quot;The Plain v1&quot; Jekyll theme. I forked this repository as <a href="https://github.com/tifoss/blogc-the-plain">https:&#x2F;&#x2F;github.com&#x2F;tifoss&#x2F;blogc-the-plain</a>, and did some minor adaptions to match my needs, and fill my data.</p>
<h1 id="how-to-build-the-blog-">How to build the blog?</h1>
<p>First, you need to install blogc on your machine.</p>
<h2 id="install-blogc">Install blogc</h2>
<p>I forked <a href="https://github.com/blogc/blogc">https:&#x2F;&#x2F;github.com&#x2F;blogc&#x2F;blogc</a> and cloned the master branch. Building and installing blogc was quite straight forward. I had to install the dependency <code>ronn</code> ( <a href="https://github.com/rtomayko/ronn">https:&#x2F;&#x2F;github.com&#x2F;rtomayko&#x2F;ronn</a> ), but it&#x27;s available in the Debian repositories, so a simple <code>apt install ronn</code> did the job.</p>
<p>Building blogc is straight forward, but you should make sure to enable all features you want, e.g. the local preview server:</p>
<pre><code>$ .&#x2F;autogen.sh
$ .&#x2F;configure --enable-git-receiver --enable-make --enable-runserver
$ make
# make install</code></pre>
<h2 id="fill-the-template">Fill the template</h2>
<p>I use my copy of <a href="https://github.com/blogc/blogc-the-plain">https:&#x2F;&#x2F;github.com&#x2F;blogc&#x2F;blogc-the-plain</a>. The template is making use of Gravatar, so I used the chance to create a Gravatar profile for this project: <a href="https://gravatar.com/mee0fbe392b72f7">https:&#x2F;&#x2F;gravatar.com&#x2F;mee0fbe392b72f7</a></p>
<p>Configuring the template was straight forward. The <code>Makefile</code> contains some parameters. Also the templates are easy to read and to adapt. A look at the blogc source manpage ( <a href="https://blogc.rgm.io/man/blogc-source.7.html">https:&#x2F;&#x2F;blogc.rgm.io&#x2F;man&#x2F;blogc-source.7.html</a> ) and the blogc template manpage ( <a href="https://blogc.rgm.io/man/blogc-template.7.html">https:&#x2F;&#x2F;blogc.rgm.io&#x2F;man&#x2F;blogc-template.7.html</a> ) helps to become aware of the formatting and also available template variables.</p>
<h2 id="local-preview">Local preview</h2>
<p>The result can be locally preview using <code>make</code> to build the site, and <code>make serve</code> to run the blogc test server.</p>
<p>After changing something, the following commands update the preview:</p>
<pre><code>make clean; make; make serve</code></pre>
<h2 id="publishing">Publishing</h2>
<p>I use a Github static page to serve the blog. The content is in a repository on the main branch. I added this repository as git submodule to my template repository and adapted the build folder name.</p>
]]></content>
  </entry>
  
</feed>
